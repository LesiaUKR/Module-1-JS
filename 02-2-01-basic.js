/*
 * Функции
 * - Функциональные выражения
 * - Аргументы и параметры
 * - Возврат значения
 */

//функцию называют так, чтобы она отвечала на вопрос Что сделать (глагол)?
// const add = function (x, y) {
//   console.log(x);
//   console.log(y);
//   console.log('Выполянется функция add');
  
//   // const result = x + y;  //это заменяем на  return x + y;
//   // console.log('x + y: ', result);
//   return x + y;
// };

//сверху только обяъвлена функция, вначале объявляем, а затем вызываем

// add(5, 3); //вызываем функцию
// add(7, 9);
// x, y - это мясо для мясорубки, аргументы функции

 // return x + y; - это то, что мы хотим вернуть из этой функции, т.е. результат работы функции

 //ниже это новые переменные с новыми значениями аргументов, 

// const r1 = add(5, 3);
// console.log('r1: ', r1);

// const r2 = add(10, 15);
// console.log('r2: ', r2);

// const r3 = add(30, 50);
// console.log('r3: ', r3);

// const fn = function () {
//   return 555;
//   //если интерпретатор увидит return на первой строке, то это означает, что в этом месте прерывается выполнение функции
//  //поэтому ниже после return все светится серым
//   //если return стоит во вложенных условиях или фунциях, интерпретатор всеравно прекратит функцию
//   console.log(1);
//   console.log(2);
//   console.log(3);
// };
// return возвращает туда результат функции, где она вызвана
//если в функции не стоит return, то интерпретатор вернет undefined (неопределено)
// console.log(fn());

//   const fn = function (value) {
//   console.log(1);
//   console.log(2);
//   if (value < 50) {
//     return 'Меньше чем 50'; //если условие не выполнено - не прервется, даже если есть return,
//     //прервется только если выполнится условие
//   }

//   return 'Больше чем 50';
// };

// console.log('Результат функции: ', fn(10));

// console.log('Результат функции: ', fn(1000));

/*
 * - Стек вызовов - 
 * - Stack trace и поиск ошибок
 */
// const fnA = function () {
//   console.log('Выполняется функция A');
//   fnB();
// };

// const fnB = function () {
//   console.log('Выполняется функция B');
//  fnC();
// };

// const fnC = function () {
//   console.log('Выполняется функция C');
//   console.log(value);
// };

// // // console.log('Лог перед вызовом функции A');

// fnA();

// // console.log('Лог после вызова функции A');

// // console.log('Лог перед вызовом функции B');
// fnB();
// // console.log('Лог после вызова функции B');

// // console.log('Лог перед вызовом функции C');
// fnC();
// // console.log('Лог после вызова функции C');

 